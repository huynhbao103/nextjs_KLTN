"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/weather/route";
exports.ids = ["app/api/weather/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fweather%2Froute&page=%2Fapi%2Fweather%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fweather%2Froute.ts&appDir=D%3A%5CKh%C3%B3a%20lu%E1%BA%ADn%20t%E1%BB%91t%20nghi%E1%BB%87p%5Cfe-kltn%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CKh%C3%B3a%20lu%E1%BA%ADn%20t%E1%BB%91t%20nghi%E1%BB%87p%5Cfe-kltn&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fweather%2Froute&page=%2Fapi%2Fweather%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fweather%2Froute.ts&appDir=D%3A%5CKh%C3%B3a%20lu%E1%BA%ADn%20t%E1%BB%91t%20nghi%E1%BB%87p%5Cfe-kltn%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CKh%C3%B3a%20lu%E1%BA%ADn%20t%E1%BB%91t%20nghi%E1%BB%87p%5Cfe-kltn&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var D_Kh_a_lu_n_t_t_nghi_p_fe_kltn_src_app_api_weather_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/weather/route.ts */ \"(rsc)/./src/app/api/weather/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/weather/route\",\n        pathname: \"/api/weather\",\n        filename: \"route\",\n        bundlePath: \"app/api/weather/route\"\n    },\n    resolvedPagePath: \"D:\\\\Khóa luận tốt nghiệp\\\\fe-kltn\\\\src\\\\app\\\\api\\\\weather\\\\route.ts\",\n    nextConfigOutput,\n    userland: D_Kh_a_lu_n_t_t_nghi_p_fe_kltn_src_app_api_weather_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/weather/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZ3ZWF0aGVyJTJGcm91dGUmcGFnZT0lMkZhcGklMkZ3ZWF0aGVyJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGd2VhdGhlciUyRnJvdXRlLnRzJmFwcERpcj1EJTNBJTVDS2glQzMlQjNhJTIwbHUlRTElQkElQURuJTIwdCVFMSVCQiU5MXQlMjBuZ2hpJUUxJUJCJTg3cCU1Q2ZlLWtsdG4lNUNzcmMlNUNhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPUQlM0ElNUNLaCVDMyVCM2ElMjBsdSVFMSVCQSVBRG4lMjB0JUUxJUJCJTkxdCUyMG5naGklRTElQkIlODdwJTVDZmUta2x0biZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNtQjtBQUNoRztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHVHQUF1RztBQUMvRztBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzZKOztBQUU3SiIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWZvb2QtcmVjb21tZW5kYXRpb24vPzE1OGUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiRDpcXFxcS2jDs2EgbHXhuq1uIHThu5F0IG5naGnhu4dwXFxcXGZlLWtsdG5cXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxcd2VhdGhlclxcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvd2VhdGhlci9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3dlYXRoZXJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL3dlYXRoZXIvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJEOlxcXFxLaMOzYSBsdeG6rW4gdOG7kXQgbmdoaeG7h3BcXFxcZmUta2x0blxcXFxzcmNcXFxcYXBwXFxcXGFwaVxcXFx3ZWF0aGVyXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL3dlYXRoZXIvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgaGVhZGVySG9va3MsIHN0YXRpY0dlbmVyYXRpb25CYWlsb3V0LCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fweather%2Froute&page=%2Fapi%2Fweather%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fweather%2Froute.ts&appDir=D%3A%5CKh%C3%B3a%20lu%E1%BA%ADn%20t%E1%BB%91t%20nghi%E1%BB%87p%5Cfe-kltn%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CKh%C3%B3a%20lu%E1%BA%ADn%20t%E1%BB%91t%20nghi%E1%BB%87p%5Cfe-kltn&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/weather/route.ts":
/*!**************************************!*\
  !*** ./src/app/api/weather/route.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n\n// Cache in memory (trong production nên dùng Redis)\nconst weatherCache = new Map();\nconst CACHE_DURATION = 10 * 60 * 1000; // 10 minutes\n// Rate limiting (trong production nên dùng Redis)\nconst rateLimitMap = new Map();\nconst RATE_LIMIT_WINDOW = 60 * 1000; // 1 minute\nconst RATE_LIMIT_MAX_REQUESTS = 30; // 30 requests per minute\n// Helper function để lấy client IP\nfunction getClientIP(request) {\n    return request.headers.get(\"x-forwarded-for\")?.split(\",\")[0] || request.headers.get(\"x-real-ip\") || \"unknown\";\n}\n// Rate limiting check\nfunction checkRateLimit(clientIP) {\n    const now = Date.now();\n    const clientData = rateLimitMap.get(clientIP);\n    if (!clientData || now > clientData.resetTime) {\n        rateLimitMap.set(clientIP, {\n            count: 1,\n            resetTime: now + RATE_LIMIT_WINDOW\n        });\n        return true;\n    }\n    if (clientData.count >= RATE_LIMIT_MAX_REQUESTS) {\n        return false;\n    }\n    clientData.count++;\n    return true;\n}\n// Cache helper\nfunction getCachedData(key) {\n    const cached = weatherCache.get(key);\n    if (!cached) return null;\n    if (Date.now() - cached.timestamp > CACHE_DURATION) {\n        weatherCache.delete(key);\n        return null;\n    }\n    return cached.data;\n}\nfunction setCachedData(key, data) {\n    weatherCache.set(key, {\n        data,\n        timestamp: Date.now()\n    });\n}\n// Convert OpenWeatherMap data to our format\nfunction convertOpenWeatherMapData(weatherData, forecastData) {\n    const current = weatherData;\n    // Safe access to nested properties\n    const locationName = current?.name || \"Unknown Location\";\n    const country = current?.sys?.country || \"\";\n    const latitude = current?.coord?.lat || 0;\n    const longitude = current?.coord?.lon || 0;\n    const timezone = current?.timezone || 0;\n    const tempC = current?.main?.temp || 0;\n    const tempF = tempC * 9 / 5 + 32;\n    const feelsLikeC = current?.main?.feels_like || tempC;\n    const feelsLikeF = feelsLikeC * 9 / 5 + 32;\n    const humidity = current?.main?.humidity || 0;\n    const pressure = current?.main?.pressure || 0;\n    const windSpeed = current?.wind?.speed || 0;\n    const windDeg = current?.wind?.deg || 0;\n    const windKph = windSpeed * 3.6;\n    const windMph = windSpeed * 2.237;\n    const visibility = current?.visibility || 0;\n    const visibilityKm = visibility / 1000;\n    const weatherCondition = current?.weather?.[0] || {};\n    const conditionText = weatherCondition.description || \"Unknown\";\n    const conditionIcon = weatherCondition.icon ? `/api/weather-icon?icon=${weatherCondition.icon}` : \"\";\n    const conditionCode = weatherCondition.id || 0;\n    return {\n        location: {\n            name: locationName,\n            country: country,\n            region: \"\",\n            lat: latitude,\n            lon: longitude,\n            timezone: timezone,\n            localtime: new Date().toISOString()\n        },\n        current: {\n            temp_c: tempC,\n            temp_f: tempF,\n            condition: {\n                text: conditionText,\n                icon: conditionIcon,\n                code: conditionCode\n            },\n            humidity: humidity,\n            wind_kph: windKph,\n            wind_mph: windMph,\n            wind_dir: getWindDirection(windDeg),\n            pressure_mb: pressure,\n            feelslike_c: feelsLikeC,\n            feelslike_f: feelsLikeF,\n            uv: 0,\n            visibility_km: visibilityKm,\n            last_updated: new Date().toISOString(),\n            vis_km: visibilityKm\n        },\n        forecast: {\n            forecastday: forecastData ? convertForecastData(forecastData) : []\n        }\n    };\n}\nfunction convertForecastData(forecastData) {\n    if (!forecastData?.list || !Array.isArray(forecastData.list)) {\n        console.warn(\"Invalid forecast data structure:\", forecastData);\n        return [];\n    }\n    // Group by day\n    const dailyData = new Map();\n    forecastData.list.forEach((item)=>{\n        if (!item?.dt || !item?.main || !item?.weather?.[0]) {\n            console.warn(\"Invalid forecast item:\", item);\n            return;\n        }\n        const date = new Date(item.dt * 1000).toDateString();\n        if (!dailyData.has(date)) {\n            dailyData.set(date, {\n                date: new Date(item.dt * 1000).toISOString().split(\"T\")[0],\n                day: {\n                    maxtemp_c: item.main.temp_max || 0,\n                    maxtemp_f: (item.main.temp_max || 0) * 9 / 5 + 32,\n                    mintemp_c: item.main.temp_min || 0,\n                    mintemp_f: (item.main.temp_min || 0) * 9 / 5 + 32,\n                    avgtemp_c: item.main.temp || 0,\n                    avgtemp_f: (item.main.temp || 0) * 9 / 5 + 32,\n                    maxwind_kph: (item.wind?.speed || 0) * 3.6,\n                    maxwind_mph: (item.wind?.speed || 0) * 2.237,\n                    totalprecip_mm: item.rain?.[\"3h\"] || 0,\n                    totalprecip_in: (item.rain?.[\"3h\"] || 0) / 25.4,\n                    avghumidity: item.main.humidity || 0,\n                    condition: {\n                        text: item.weather[0].description || \"Unknown\",\n                        icon: item.weather[0].icon ? `/api/weather-icon?icon=${item.weather[0].icon}` : \"\",\n                        code: item.weather[0].id || 0\n                    },\n                    uv: 0\n                },\n                hour: []\n            });\n        }\n        dailyData.get(date).hour.push({\n            time: new Date(item.dt * 1000).toISOString(),\n            temp_c: item.main.temp || 0,\n            temp_f: (item.main.temp || 0) * 9 / 5 + 32,\n            condition: {\n                text: item.weather[0].description || \"Unknown\",\n                icon: item.weather[0].icon ? `/api/weather-icon?icon=${item.weather[0].icon}` : \"\",\n                code: item.weather[0].id || 0\n            },\n            wind_kph: (item.wind?.speed || 0) * 3.6,\n            wind_mph: (item.wind?.speed || 0) * 2.237,\n            wind_dir: getWindDirection(item.wind?.deg || 0),\n            pressure_mb: item.main.pressure || 0,\n            precip_mm: item.rain?.[\"3h\"] || 0,\n            precip_in: (item.rain?.[\"3h\"] || 0) / 25.4,\n            humidity: item.main.humidity || 0,\n            cloud: item.clouds?.all || 0,\n            feelslike_c: item.main.feels_like || item.main.temp || 0,\n            feelslike_f: (item.main.feels_like || item.main.temp || 0) * 9 / 5 + 32,\n            chance_of_rain: 0,\n            chance_of_snow: 0,\n            vis_km: (item.visibility || 0) / 1000,\n            vis_miles: (item.visibility || 0) / 1609.34,\n            uv: 0\n        });\n    });\n    return Array.from(dailyData.values());\n}\nfunction getWindDirection(degrees) {\n    const directions = [\n        \"N\",\n        \"NNE\",\n        \"NE\",\n        \"ENE\",\n        \"E\",\n        \"ESE\",\n        \"SE\",\n        \"SSE\",\n        \"S\",\n        \"SSW\",\n        \"SW\",\n        \"WSW\",\n        \"W\",\n        \"WNW\",\n        \"NW\",\n        \"NNW\"\n    ];\n    const index = Math.round(degrees / 22.5) % 16;\n    return directions[index];\n}\nasync function GET(request) {\n    try {\n        // Rate limiting check\n        const clientIP = getClientIP(request);\n        if (!checkRateLimit(clientIP)) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Rate limit exceeded. Please try again later.\"\n            }, {\n                status: 429\n            });\n        }\n        const { searchParams } = new URL(request.url);\n        const lat = searchParams.get(\"lat\");\n        const lon = searchParams.get(\"lon\");\n        const days = searchParams.get(\"days\");\n        const address = searchParams.get(\"address\");\n        console.log(\"Weather API request:\", {\n            lat,\n            lon,\n            days,\n            address\n        });\n        // Xử lý tìm kiếm theo địa chỉ\n        if (address) {\n            const cacheKey = `weather_address_${address}`;\n            const cached = getCachedData(cacheKey);\n            if (cached) {\n                console.log(\"Returning cached address weather data\");\n                return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json(cached);\n            }\n            // Gọi OpenWeatherMap với địa chỉ\n            const apiKey = process.env.WEATHER_API_KEY;\n            if (!apiKey) {\n                console.error(\"Weather API key is not configured\");\n                return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                    error: \"Weather API key is not configured\"\n                }, {\n                    status: 500\n                });\n            }\n            const url = `https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(address)}&appid=${apiKey}&units=metric&lang=vi`;\n            console.log(\"Calling OpenWeatherMap with address:\", url);\n            const response = await fetch(url);\n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error(\"OpenWeatherMap error:\", response.status, errorText);\n                throw new Error(`OpenWeatherMap error: ${response.status} ${response.statusText} - ${errorText}`);\n            }\n            const data = await response.json();\n            console.log(\"OpenWeatherMap response received:\", data);\n            // Validate response data\n            if (!data || typeof data !== \"object\") {\n                throw new Error(\"Invalid response from OpenWeatherMap API\");\n            }\n            const convertedData = convertOpenWeatherMapData(data);\n            setCachedData(cacheKey, convertedData);\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json(convertedData);\n        }\n        // Xử lý tìm kiếm theo tọa độ\n        if (!lat || !lon) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Missing latitude or longitude parameters\"\n            }, {\n                status: 400\n            });\n        }\n        const latitude = parseFloat(lat);\n        const longitude = parseFloat(lon);\n        const forecastDays = days ? parseInt(days) : 3;\n        if (isNaN(latitude) || isNaN(longitude)) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Invalid latitude or longitude values\"\n            }, {\n                status: 400\n            });\n        }\n        // Check cache cho weather data\n        const weatherCacheKey = `weather_${latitude}_${longitude}`;\n        const cachedWeather = getCachedData(weatherCacheKey);\n        if (cachedWeather) {\n            console.log(\"Returning cached weather data\");\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json(cachedWeather);\n        }\n        // Gọi external API\n        const apiKey = process.env.WEATHER_API_KEY || \"b6bd7b2942f4b524dd696aaa422d707b\";\n        if (!apiKey) {\n            console.error(\"Weather API key is not configured\");\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Weather API key is not configured\"\n            }, {\n                status: 500\n            });\n        }\n        console.log(\"API Key found, calling OpenWeatherMap APIs...\");\n        // Lấy current weather và forecast từ OpenWeatherMap\n        const currentUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${apiKey}&units=metric&lang=vi`;\n        const forecastUrl = `https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&appid=${apiKey}&units=metric&lang=vi&cnt=${forecastDays * 8}`; // 8 data points per day\n        console.log(\"Calling current weather API:\", currentUrl);\n        console.log(\"Calling forecast API:\", forecastUrl);\n        const [currentResponse, forecastResponse] = await Promise.all([\n            fetch(currentUrl),\n            fetch(forecastUrl)\n        ]);\n        console.log(\"API responses received:\", {\n            current: currentResponse.status,\n            forecast: forecastResponse.status\n        });\n        if (!currentResponse.ok) {\n            const errorText = await currentResponse.text();\n            console.error(\"Current weather API error:\", currentResponse.status, errorText);\n            throw new Error(`Current weather API error: ${currentResponse.status} ${currentResponse.statusText} - ${errorText}`);\n        }\n        if (!forecastResponse.ok) {\n            const errorText = await forecastResponse.text();\n            console.error(\"Forecast API error:\", forecastResponse.status, errorText);\n            throw new Error(`Forecast API error: ${forecastResponse.status} ${forecastResponse.statusText} - ${errorText}`);\n        }\n        const [currentData, forecastData] = await Promise.all([\n            currentResponse.json(),\n            forecastResponse.json()\n        ]);\n        console.log(\"Weather data parsed successfully\");\n        console.log(\"Current data sample:\", {\n            name: currentData?.name,\n            main: currentData?.main,\n            weather: currentData?.weather\n        });\n        // Validate response data\n        if (!currentData || typeof currentData !== \"object\") {\n            throw new Error(\"Invalid current weather response from OpenWeatherMap API\");\n        }\n        // Convert OpenWeatherMap data to our format\n        const combinedData = convertOpenWeatherMapData(currentData, forecastData);\n        // Cache the result\n        setCachedData(weatherCacheKey, combinedData);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json(combinedData);\n    } catch (error) {\n        console.error(\"Weather API error:\", error);\n        if (error instanceof Error) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: error.message\n            }, {\n                status: 500\n            });\n        }\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            error: \"Internal server error\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/weather/route.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fweather%2Froute&page=%2Fapi%2Fweather%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fweather%2Froute.ts&appDir=D%3A%5CKh%C3%B3a%20lu%E1%BA%ADn%20t%E1%BB%91t%20nghi%E1%BB%87p%5Cfe-kltn%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CKh%C3%B3a%20lu%E1%BA%ADn%20t%E1%BB%91t%20nghi%E1%BB%87p%5Cfe-kltn&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();